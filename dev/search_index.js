var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Containers","category":"page"},{"location":"#Containers.jl","page":"Home","title":"Containers.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Containers.jl.","category":"page"},{"location":"#Container-creation","page":"Home","title":"Container creation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All you need to know to create a new mixed-type container using Containers.jl is how to use the @container macro. The user have the possibility to create both named and unnamed fields within the user-defined container. In the latter case, a default name will be assigned during the container creation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The basic syntax to be used to define a container is:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@container \"ContainerName\" begin\n    \"field-1\" → T1,\n    \"field-2\" → T2(1.0),\n    T1(1.0),\n    T2\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here ContainerName is the user-defined name of the container. In the begin ... end block the container's field are instead listed. Four possible formats are available:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\"field-1\" → T1 – field defined as type T1 with name field-1;\n\"field-1\" → T2(1.0) – field defined as type T2 with name field-2;\nT1(1.0) – unnamed filed with type T1;\nT2 – unnamed filed with type T2;","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also use a type-only definition of the field or a type constructor. In the latter case, there is the possibility to create an empty constructor for the new container, where all the fields initialization is handled by the container constructor itself.","category":"page"}]
}
